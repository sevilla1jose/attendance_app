import 'package:equatable/equatable.dart';

/// Enumera los tipos de reporte
enum ReportType { daily, weekly, monthly, custom }

/// Extensión para convertir ReportType a String y viceversa
extension ReportTypeExtension on ReportType {
  String get value {
    switch (this) {
      case ReportType.daily:
        return 'daily';
      case ReportType.weekly:
        return 'weekly';
      case ReportType.monthly:
        return 'monthly';
      case ReportType.custom:
        return 'custom';
    }
  }

  static ReportType fromString(String value) {
    switch (value) {
      case 'daily':
        return ReportType.daily;
      case 'weekly':
        return ReportType.weekly;
      case 'monthly':
        return ReportType.monthly;
      case 'custom':
        return ReportType.custom;
      default:
        throw ArgumentError('Tipo de reporte inválido: $value');
    }
  }
}

/// Enumera los formatos de reporte
enum ReportFormat { pdf, excel }

/// Extensión para convertir ReportFormat a String y viceversa
extension ReportFormatExtension on ReportFormat {
  String get value {
    switch (this) {
      case ReportFormat.pdf:
        return 'pdf';
      case ReportFormat.excel:
        return 'excel';
    }
  }

  String get extension {
    switch (this) {
      case ReportFormat.pdf:
        return '.pdf';
      case ReportFormat.excel:
        return '.xlsx';
    }
  }

  String get mimeType {
    switch (this) {
      case ReportFormat.pdf:
        return 'application/pdf';
      case ReportFormat.excel:
        return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }
  }

  static ReportFormat fromString(String value) {
    switch (value) {
      case 'pdf':
        return ReportFormat.pdf;
      case 'excel':
        return ReportFormat.excel;
      default:
        throw ArgumentError('Formato de reporte inválido: $value');
    }
  }
}

/// Entidad que representa un reporte de asistencia en el sistema
class Report extends Equatable {
  /// Identificador único del reporte
  final String id;

  /// Nombre del reporte
  final String name;

  /// Descripción del reporte
  final String description;

  /// Tipo de reporte
  final ReportType type;

  /// Fecha de inicio del período del reporte
  final DateTime startDate;

  /// Fecha de fin del período del reporte
  final DateTime endDate;

  /// ID del usuario que generó el reporte (opcional)
  final String? userId;

  /// ID de la ubicación para filtrar el reporte (opcional)
  final String? locationId;

  /// Lista de IDs de usuarios incluidos en el reporte (opcional)
  final List<String>? userIds;

  /// Formato del reporte
  final ReportFormat format;

  /// Ruta del archivo del reporte
  final String filePath;

  /// Tamaño del archivo en bytes
  final int fileSize;

  /// Indica si el reporte se generó automáticamente
  final bool isAutoGenerated;

  /// Fecha y hora de creación del reporte
  final DateTime createdAt;

  /// Constructor de la entidad Reporte
  const Report({
    required this.id,
    required this.name,
    required this.description,
    required this.type,
    required this.startDate,
    required this.endDate,
    this.userId,
    this.locationId,
    this.userIds,
    required this.format,
    required this.filePath,
    required this.fileSize,
    this.isAutoGenerated = false,
    required this.createdAt,
  });

  /// Crea una copia del reporte con algunos campos modificados
  Report copyWith({
    String? id,
    String? name,
    String? description,
    ReportType? type,
    DateTime? startDate,
    DateTime? endDate,
    String? userId,
    String? locationId,
    List<String>? userIds,
    ReportFormat? format,
    String? filePath,
    int? fileSize,
    bool? isAutoGenerated,
    DateTime? createdAt,
  }) {
    return Report(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      type: type ?? this.type,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      userId: userId ?? this.userId,
      locationId: locationId ?? this.locationId,
      userIds: userIds ?? this.userIds,
      format: format ?? this.format,
      filePath: filePath ?? this.filePath,
      fileSize: fileSize ?? this.fileSize,
      isAutoGenerated: isAutoGenerated ?? this.isAutoGenerated,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  List<Object?> get props => [
        id,
        name,
        description,
        type,
        startDate,
        endDate,
        userId,
        locationId,
        userIds,
        format,
        filePath,
        fileSize,
        isAutoGenerated,
        createdAt,
      ];
}
