import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:attendance_app/core/errors/failures.dart';
import 'package:attendance_app/domain/entities/report.dart';
import 'package:attendance_app/domain/repositories/attendance_repository.dart';

/// Caso de uso para generar un reporte de asistencia
class GenerateAttendanceReport {
  final AttendanceRepository repository;

  GenerateAttendanceReport(this.repository);

  /// Ejecuta el caso de uso
  ///
  /// [params] - Parámetros necesarios para generar un reporte de asistencia
  ///
  /// Retorna el reporte generado si la operación es exitosa
  Future<Either<Failure, Report>> call(Params params) async {
    // Este caso de uso podría necesitar una implementación más compleja
    // que delegue en un servicio específico para generación de reportes

    // Por ahora, lo dejamos como un placeholder para la arquitectura
    throw UnimplementedError(
        'Este caso de uso se implementará en el próximo sprint');
  }
}

/// Parámetros para el caso de uso GenerateAttendanceReport
class Params extends Equatable {
  final String name;
  final String description;
  final ReportType type;
  final DateTime startDate;
  final DateTime endDate;
  final String? userId;
  final String? locationId;
  final List<String>? userIds;
  final ReportFormat format;
  final bool isAutoGenerated;

  const Params({
    required this.name,
    required this.description,
    required this.type,
    required this.startDate,
    required this.endDate,
    this.userId,
    this.locationId,
    this.userIds,
    required this.format,
    this.isAutoGenerated = false,
  });

  /// Constructor para generar un reporte diario
  factory Params.daily({
    required DateTime date,
    String? locationId,
    ReportFormat format = ReportFormat.pdf,
  }) {
    final startOfDay = DateTime(date.year, date.month, date.day);
    final endOfDay = DateTime(date.year, date.month, date.day, 23, 59, 59);

    return Params(
      name: 'Reporte Diario - ${date.day}/${date.month}/${date.year}',
      description:
          'Reporte de asistencia para el día ${date.day}/${date.month}/${date.year}',
      type: ReportType.daily,
      startDate: startOfDay,
      endDate: endOfDay,
      locationId: locationId,
      format: format,
    );
  }

  /// Constructor para generar un reporte semanal
  factory Params.weekly({
    required DateTime weekStart,
    String? locationId,
    ReportFormat format = ReportFormat.pdf,
  }) {
    final startOfWeek =
        DateTime(weekStart.year, weekStart.month, weekStart.day);
    final endOfWeek = DateTime(
        weekStart.year, weekStart.month, weekStart.day + 6, 23, 59, 59);

    return Params(
      name:
          'Reporte Semanal - Semana del ${weekStart.day}/${weekStart.month}/${weekStart.year}',
      description:
          'Reporte de asistencia para la semana del ${weekStart.day}/${weekStart.month}/${weekStart.year} al ${endOfWeek.day}/${endOfWeek.month}/${endOfWeek.year}',
      type: ReportType.weekly,
      startDate: startOfWeek,
      endDate: endOfWeek,
      locationId: locationId,
      format: format,
    );
  }

  /// Constructor para generar un reporte mensual
  factory Params.monthly({
    required int year,
    required int month,
    String? locationId,
    ReportFormat format = ReportFormat.pdf,
  }) {
    final startOfMonth = DateTime(year, month, 1);
    final endOfMonth = (month < 12)
        ? DateTime(year, month + 1, 1).subtract(const Duration(days: 1))
        : DateTime(year + 1, 1, 1).subtract(const Duration(days: 1));

    return Params(
      name: 'Reporte Mensual - ${month}/${year}',
      description: 'Reporte de asistencia para el mes de ${month}/${year}',
      type: ReportType.monthly,
      startDate: startOfMonth,
      endDate: DateTime(
          endOfMonth.year, endOfMonth.month, endOfMonth.day, 23, 59, 59),
      locationId: locationId,
      format: format,
    );
  }

  @override
  List<Object?> get props => [
        name,
        description,
        type,
        startDate,
        endDate,
        userId,
        locationId,
        userIds,
        format,
        isAutoGenerated,
      ];
}
